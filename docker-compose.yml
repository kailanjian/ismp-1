version: "3.8"

services:
  postgres:
    image: postgres:12-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ismp
      POSTGRES_USER: ismp
      POSTGRES_PASSWORD: "password"

  backend:
    # Docker-compose will build an image called "ismp_local/backend:dev" which we will re-use for tests
    build: ./backend
    image: "localhost/ismp/backend:snapshot"
    volumes:
      - ./backend:/app/api
    ports:
      - "8000:8000"
    environment: &BACKEND_ENV
      # AWS settings
      USE_S3: "FALSE" # change this to true and populate the following fields to upload to s3.
      AWS_ACCESS_KEY_ID: "INSERT YOUR AWS ACCESS KEY ID HERE"
      AWS_SECRET_ACCESS_KEY: "INSERT YOUR AWS SECRET ACCESS KEY HERE"
      AWS_STORAGE_BUCKET_NAME: "INSERT THE NAME OF THE S3 BUCKET YOU CREATED HERE"
      # MailChimp Settings
      USE_MAILCHIMP: 'FALSE'
      MAILCHIMP_USERNAME: 'INSERT MAILCHIMP USERNAME HERE'
      MAILCHIMP_API_KEY: 'INSERT MAILCHIMP API KEY HERE'
      MAILCHIMP_LIST_ID: 'INSERT MAILCHIMP LIST ID HERE'
      # Hostname for when django is deployed. Leaving an empty string
      # will allow localhost and 127.0.0.1
      ALLOWED_HOST: ''
      DB_DATABASE: ismp
      DB_HOST: postgres
      DB_PASSWORD: 'password'
      DB_PORT: 5432
      DB_USER: ismp
      DEBUG: 'TRUE'
      # this is not the key that will be used in production. Also please note
      # that in environment variables in docker-compose.yml, you have to
      # escape the $ character with another $ ($$).
      DJANGO_SECRET_KEY: "this_is_not_a_real_secret_key"
    depends_on:
      - postgres

  backend_migrations:
    image: "ismp_local/backend:dev"
    volumes:
      - ./backend:/app/api
    environment:
      <<: *BACKEND_ENV
    command: /app/api/run_migrations.sh
    depends_on:
      - postgres
      - backend

  frontend:
    # Docker-compose will build an image called "ismp_local/frontend:dev" which we will re-use for tests
    image: "localhost/ismp/frontend:snapshot"
    build: ./frontend
    stdin_open: true
    tty: true
    environment:
      REACT_APP_API_HOST: "http://backend:8000"
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
    ports:
      - "3000:3000"
